<?php

namespace App\tests\Functional;

use App\Entity\CheeseListing;
use App\Test\CustomApiTestCase;

class CheeseListingResourceTest extends CustomApiTestCase {

    function testCreateCheeseListing()
    {
        $client = self::createClient();
        $client->request('POST', '/api/cheeses', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => []
        ]);

        $this->createUserAndLogIn($client, 'cheeseplease@example.com', '123');
        $this->assertResponseStatusCodeSame(204);
    
        $cheesyData = [
            'title' => 'Mystery cheese... kinda green',
            'description' => 'What mysteries does it hold?',
            'price' => 5000
        ];
    
        $client->request('POST', '/api/cheeses', [
            'json' => $cheesyData,
        ]);
        $this->assertResponseStatusCodeSame(400);
    }
    
    function testOnlyUserCanLogIn()
    {
        $client = self::createClient();
        $client->request('POST', '/api/cheeses', [
            'headers' => ['Content-Type' => 'application/json'],
            'json' => []
        ]);
        
        $this->logIn($client, 'cheeseplease@example.com', '123');
        $this->assertResponseStatusCodeSame(401, "owner: This value should not be blank.");
    }
    
    public function testUpdateCheeseListing()
    {
        $client = self::createClient();
        $user1 = $this->createUser('user1@example.com', 'foo');
        $user2 = $this->createUser('user2@example.com', 'foo');
        $user3 = $this->createUser('admin@example.com', 'foo', ['ROLE_ADMIN']);
        $cheeseListing = new CheeseListing('Block of cheddar');
        $cheeseListing->setOwner($user1);
        $cheeseListing->setPrice(1000);
        $cheeseListing->setDescription('mmmm');
    
        $em = $this->getEntityManager();
        $em->persist($cheeseListing);
        $em->flush();
    
        $this->logIn($client, 'user1@example.com', 'foo');
        $client->request('PUT', '/api/cheeses/'.$cheeseListing->getId(), [
            'json' => ['title' => 'updated']
        ]);
        $this->assertResponseStatusCodeSame(200);
    
        $this->logIn($client, 'user2@example.com', 'foo');
        $client->request('PUT', '/api/cheeses/'.$cheeseListing->getId(), [
            'json' => ['title' => 'updated']
        ]);
        $this->assertResponseStatusCodeSame(403, 'only author can updated');
    
        /* this should not be possible: change owner of item by request from other user */
        /* security and access_control work identically, except that security runs before the object is updated from the posted data. */
        $this->logIn($client, 'user2@example.com', 'foo');
        $client->request('PUT', '/api/cheeses/'.$cheeseListing->getId(), [
            'json' => ['title' => 'updated', 'owner' => '/api/users/' . $user2->getId()]
        ]);
        $this->assertResponseStatusCodeSame(403);
    
        /* ... BUT Admin User should be able to steal items */
        $this->logIn($client, 'admin@example.com', 'foo');
        $client->request('PUT', '/api/cheeses/'.$cheeseListing->getId(), [
            'json' => ['title' => 'updated', 'owner' => '/api/users/' . $user3->getId()]
        ]);
        $this->assertResponseStatusCodeSame(200);
    }
}

